Points = new (Meteor.Collection)(null)
if Points.find({}).count() == 0
  i = 0
  while i < 20
    Points.insert
      date: moment().startOf('day').subtract('days', Math.floor(Math.random() * 1000)).toDate()
      value: Math.floor(Math.random() * 100) + 500
    i++
Template.graph.events
  'click #add': ->
    Points.insert
      date: moment().startOf('day').subtract('days', Math.floor(Math.random() * 1000)).toDate()
      value: Math.floor(Math.random() * 100) + 500
    return
  'click #remove': ->
    toRemove = Random.choice(Points.find().fetch())
    Points.remove _id: toRemove._id
    return
  'click #randomize': ->
    #loop through bars
    Points.find({}).forEach (point) ->
      Points.update { _id: point._id }, $set: value: Math.floor(Math.random() * 100) + 500
      return
    return

Template.graph.rendered = ->
  #Width and height
  margin = 
    top: 20
    right: 20
    bottom: 30
    left: 50
  width = 600 - (margin.left) - (margin.right)
  height = 400 - (margin.top) - (margin.bottom)
  x = d3.time.scale().range([
    0
    width
  ])
  y = d3.scale.linear().range([
    height
    0
  ])
  xAxis = d3.svg.axis().scale(x).orient('bottom')
  yAxis = d3.svg.axis().scale(y).orient('left')
  line = d3.svg.line().x((d) ->
    x d.date
  ).y((d) ->
    y d.value
  )
  svg = d3.select('#graph').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
  svg.append('g').attr('class', 'x axis').attr 'transform', 'translate(0,' + height + ')'
  svg.append('g').attr('class', 'y axis').append('text').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end').text 'Price ($)'
  Deps.autorun ->
    dataset = Points.find({}, sort: date: -1).fetch()
    paths = svg.selectAll('path.line').data([ dataset ])
    #todo - odd syntax here - should use a key function, but can't seem to get that working
    x.domain d3.extent(dataset, (d) ->
      d.date
    )
    y.domain d3.extent(dataset, (d) ->
      d.value
    )
    #Update X axis
    svg.select('.x.axis').transition().duration(1000).call xAxis
    #Update Y axis
    svg.select('.y.axis').transition().duration(1000).call yAxis
    paths.enter().append('path').attr('class', 'line').attr 'd', line
    paths.attr 'd', line
    #todo - should be a transisition, but removed it due to absence of key
    paths.exit().remove()
    return
  return

# ---
# generated by js2coffee 2.2.0