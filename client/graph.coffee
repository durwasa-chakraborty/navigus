Template.graph.rendered = () ->
  data = []
  bandPos = [
    -1
    -1
  ]
  pos = undefined
  xdomain = 500
  ydomain = 50
  colors = [
    'steelblue'
    'green'
  ]
  margin = 
    top: 40
    right: 40
    bottom: 50
    left: 60
  width = 760 - (margin.left) - (margin.right)
  height = 450 - (margin.top) - (margin.bottom)
  zoomArea = 
    x1: 0
    y1: 0
    x2: xdomain
    y2: ydomain
  drag = d3.behavior.drag()
  #data for testing
  d1 = []
  d2 = []

  zoom = ->
    #recalculate domains
    if zoomArea.x1 > zoomArea.x2
      x.domain [
        zoomArea.x2
        zoomArea.x1
      ]
    else
      x.domain [
        zoomArea.x1
        zoomArea.x2
      ]
    if zoomArea.y1 > zoomArea.y2
      y.domain [
        zoomArea.y2
        zoomArea.y1
      ]
    else
      y.domain [
        zoomArea.y1
        zoomArea.y2
      ]
    #update axis and redraw lines
    t = svg.transition().duration(750)
    t.select('.x.axis').call xAxis
    t.select('.y.axis').call yAxis
    t.selectAll('.line').attr 'd', line
    return

  i = 0
  while i < xdomain
    d1.push [
      i
      Math.random() * 20 + 10
    ]
    d2.push [
      i
      Math.random() * 10 + 10
    ]
    i++
  data.push d1
  data.push d2
  svg = d3.select('#graph').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
  x = d3.scale.linear().range([
    0
    width
  ]).domain([
    0
    xdomain
  ])
  y = d3.scale.linear().range([
    height
    0
  ]).domain([
    0
    ydomain
  ])
  xAxis = d3.svg.axis().scale(x).orient('bottom')
  yAxis = d3.svg.axis().scale(y).orient('left')
  line = d3.svg.line().interpolate('basis').x((d) ->
    x d[0]
  ).y((d) ->
    y d[1]
  )
  band = svg.append('rect').attr('width', 0).attr('height', 0).attr('x', 0).attr('y', 0).attr('class', 'band')
  svg.append('g').attr('class', 'x axis').call(xAxis).attr 'transform', 'translate(0,' + height + ')'
  svg.append('g').attr('class', 'y axis').call yAxis
  svg.append('clipPath').attr('id', 'clip').append('rect').attr('width', width).attr 'height', height
  for idx of data
    `idx = idx`
    svg.append('path').datum(data[idx]).attr('class', 'line line' + idx).attr('clip-path', 'url(#clip)').style('stroke', colors[idx]).attr 'd', line
  zoomOverlay = svg.append('rect').attr('width', width - 10).attr('height', height).attr('class', 'zoomOverlay').call(drag)
  zoomout = svg.append('g')
  zoomout.append('rect').attr('class', 'zoomOut').attr('width', 75).attr('height', 40).attr('x', -12).attr('y', height + margin.bottom - 20).on 'click', ->
    zoomOut()
    return
  zoomout.append('text').attr('class', 'zoomOutText').attr('width', 75).attr('height', 30).attr('x', -10).attr('y', height + margin.bottom - 5).text 'Zoom Out'
  zoom()
  drag.on 'dragend', ->
    `var pos`
    pos = d3.mouse(this)
    x1 = x.invert(bandPos[0])
    x2 = x.invert(pos[0])
    if x1 < x2
      zoomArea.x1 = x1
      zoomArea.x2 = x2
    else
      zoomArea.x1 = x2
      zoomArea.x2 = x1
    y1 = y.invert(pos[1])
    y2 = y.invert(bandPos[1])
    if x1 < x2
      zoomArea.y1 = y1
      zoomArea.y2 = y2
    else
      zoomArea.y1 = y2
      zoomArea.y2 = y1
    bandPos = [
      -1
      -1
    ]
    d3.select('.band').transition().attr('width', 0).attr('height', 0).attr('x', bandPos[0]).attr 'y', bandPos[1]
    zoom()
    return
  drag.on 'drag', ->
    `var pos`
    pos = d3.mouse(this)
    if pos[0] < bandPos[0]
      d3.select('.band').attr 'transform', 'translate(' + pos[0] + ',' + bandPos[1] + ')'
    if pos[1] < bandPos[1]
      d3.select('.band').attr 'transform', 'translate(' + pos[0] + ',' + pos[1] + ')'
    if pos[1] < bandPos[1] and pos[0] > bandPos[0]
      d3.select('.band').attr 'transform', 'translate(' + bandPos[0] + ',' + pos[1] + ')'
    if bandPos[0] == -1
      bandPos = pos
      d3.select('.band').attr 'transform', 'translate(' + bandPos[0] + ',' + bandPos[1] + ')'
    d3.select('.band').transition().duration(1).attr('width', Math.abs(bandPos[0] - (pos[0]))).attr 'height', Math.abs(bandPos[1] - (pos[1]))
    return

  zoomOut = ->
    x.domain [
      0
      xdomain
    ]
    y.domain [
      0
      ydomain
    ]
    t = svg.transition().duration(750)
    t.select('.x.axis').call xAxis
    t.select('.y.axis').call yAxis
    t.selectAll('.line').attr 'd', line
    return

  # ---
  # generated by js2coffee 2.2.0